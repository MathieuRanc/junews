security:
    enable_authenticator_manager: true
    encoders:
        App\Entity\Etudiant:
            algorithm: "auto"

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        etudiant_provider:
            entity:
                class: App\Entity\Etudiant
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/login
            # stateless: true
            provider: etudiant_provider
            json_login:
                check_path: /login_check
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        # etudiants:
        #     pattern: ^/etudiants
        #     methods: [PUT, PATCH, DELETE]
        #     stateless: true
        #     guard:
        #         authenticators:
        #             - lexik_jwt_authentication.jwt_token_authenticator
        # evenements:
        #     pattern: ^/evenements
        #     methods: [GET, POST, PUT, PATCH, DELETE]
        #     stateless: true
        #     guard:
        #         authenticators:
        #             - lexik_jwt_authentication.jwt_token_authenticator
        # activate different ways to authenticate
        # https://symfony.com/doc/current/security.html#firewalls-authentication
        # https://symfony.com/doc/current/security/impersonating_user.html
        # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/authentication_token, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - {
        #       path: ^/etudiants,
        #       roles: IS_AUTHENTICATED_FULLY,
        #       methods: [PUT, PATCH, DELETE],
        #   }
        # - {
        #       path: ^/evenements,
        #       roles: IS_AUTHENTICATED_FULLY,
        #       methods: [GET, POST, PUT, PATCH, DELETE],
        #   }
